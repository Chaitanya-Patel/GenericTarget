%% file : SFunctionGTDriverUDPMulticastReceive.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionGTDriverUDPMulticastReceive
%% 
%% Simulink version      : 10.6 (R2022b) 13-May-2022
%% TLC file generated on : 06-Oct-2023 10:52:07

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionGTDriverUDPMulticastReceive';
     def.OutputFcnSpec = 'void GT_DriverUDPMulticastReceiveStep(uint16 p1, uint32 p7, uint32 p9, uint16 y1[5*p9], uint8 y2[p7*p9], uint32 y3[p9], double y4[p9], uint32 y5[1], uint32 y6[1], int32 y7[1])';
     def.StartFcnSpec = 'void GT_DriverUDPMulticastReceiveInitialize(uint16 p1, uint8 p2[4], uint8 p3, uint8 p4[4], uint8 p5[], uint32 p6, uint32 p7, int32 p8, uint32 p9, uint32 p10, uint8 p11[4], uint8 p12)';
     def.TerminateFcnSpec = 'void GT_DriverUDPMulticastReceiveTerminate()';
     def.HeaderFiles = {'GT_DriverUDPMulticastReceive.hpp'};
     def.SourceFiles = {'GT_DriverUDPMulticastReceive.cpp', 'GT_SimulinkSupport.cpp'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionGTDriverUDPMulticastReceive "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPMulticastReceive_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        

        extern void SFunctionGTDriverUDPMulticastReceive_wrapper_Start(const uint16_T p1, const uint8_T* p2, const uint8_T p3, const uint8_T* p4, const uint8_T* p5, const uint32_T p6, const uint32_T p7, const int32_T p8, const uint32_T p9, const uint32_T p10, const uint8_T* p11, const uint8_T p12);
        extern void SFunctionGTDriverUDPMulticastReceive_wrapper_Output(const uint16_T p1, const uint32_T p7, const uint32_T p9,  uint16_T* y1,  uint8_T* y2,  uint32_T* y3,  real_T* y4,  uint32_T* y5,  uint32_T* y6,  int32_T* y7);
        extern void SFunctionGTDriverUDPMulticastReceive_wrapper_Terminate(void);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPMulticastReceive_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "GT_DriverUDPMulticastReceive.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPMulticastReceive_wrapper_Start(const uint16_T p1, const uint8_T* p2, const uint8_T p3, const uint8_T* p4, const uint8_T* p5, const uint32_T p6, const uint32_T p7, const int32_T p8, const uint32_T p9, const uint32_T p10, const uint8_T* p11, const uint8_T p12) {
            GT_DriverUDPMulticastReceiveInitialize((uint16_T)(p1), (uint8_T*)(p2), (uint8_T)(p3), (uint8_T*)(p4), (uint8_T*)(p5), (uint32_T)(p6), (uint32_T)(p7), (int32_T)(p8), (uint32_T)(p9), (uint32_T)(p10), (uint8_T*)(p11), (uint8_T)(p12));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPMulticastReceive_wrapper_Output(const uint16_T p1, const uint32_T p7, const uint32_T p9,  uint16_T* y1,  uint8_T* y2,  uint32_T* y3,  real_T* y4,  uint32_T* y5,  uint32_T* y6,  int32_T* y7) {
            GT_DriverUDPMulticastReceiveStep((uint16_T)(p1), (uint32_T)(p7), (uint32_T)(p9), y1, y2, y3, y4, y5, y6, y7);
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPMulticastReceive_wrapper_Terminate(void) {
            GT_DriverUDPMulticastReceiveTerminate();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("GT_DriverUDPMulticastReceive.hpp")>
    %endif
    %<SLibAddToStaticSources("GT_DriverUDPMulticastReceive.cpp")>
    %<SLibAddToStaticSources("GT_SimulinkSupport.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p11_ptr = LibBlockParameterBaseAddr(p11)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionGTDriverUDPMulticastReceive_wrapper_Start(%<p1_val>, %<p2_ptr>, %<p3_val>, %<p4_ptr>, %<p5_ptr>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>, %<p10_val>, %<p11_ptr>, %<p12_val>);
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p11_ptr = LibBlockParameterBaseAddr(p11)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %% 
        GT_DriverUDPMulticastReceiveInitialize(%<p1_val>, (uint8_T*)%<p2_ptr>, %<p3_val>, (uint8_T*)%<p4_ptr>, (uint8_T*)%<p5_ptr>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>, %<p10_val>, (uint8_T*)%<p11_ptr>, %<p12_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionGTDriverUDPMulticastReceive_wrapper_Output(%<p1_val>, %<p7_val>, %<p9_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>);
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %% 
        GT_DriverUDPMulticastReceiveStep(%<p1_val>, %<p7_val>, %<p9_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        SFunctionGTDriverUDPMulticastReceive_wrapper_Terminate();
    %else
        %% 
        GT_DriverUDPMulticastReceiveTerminate();
    %endif
%endfunction

%% [EOF]
