<h1>Autogenerated Interface Class</h1>
    The <b>Simulink interface class</b> is generated after the code generation of the Simulink model.
    The programming interface from the generic target software to the Simulink interface class is always the same.
    The initialization function of the Simulink interface class initializes the Simulink model.
    The Simulink model is terminated in the termination function of the Simulink interface class.
    In the same way, all step functions of the generated model code are executed by the Simulink interface class.
    <br>
    <br>
    <center><object data="../img/SimulinkInterface.svg" type="image/svg+xml"></object></center>
    <br>
    <br>
    The Simulink interface contains the instance of the actual model generated by the C/C++ code generation.
    In addition, the Simulink interface contains the following constants that can be set in MATLAB through the GT.GenericTarget class.
    <br>
    <br>
    <table>
		<tr>
            <th width="110px">Name</th>
            <th width="110px">Data Type</th>
            <th>Description</th>
        </tr>
		<tr>
            <td style="font-family: Courier New;">targetUsername</td>
            <td style="font-family: Courier New;">string</td>
            <td>Username for the target computer. Required for the SSH connection.</td>
        </tr>
		<tr>
            <td style="font-family: Courier New;">targetIPAddress</td>
            <td style="font-family: Courier New;">string</td>
            <td>Host name or IP address of the target computer. Required for the SSH connection.</td>
        </tr>
		<tr>
            <td style="font-family: Courier New;">targetSoftwareDirectory</td>
            <td style="font-family: Courier New;">string</td>
            <td>
            Directory path on the target computer where the generic target software is located.
            The default setting is <code>~/GenericTarget/</code>.
            If several generic target applications are to be used for one target computer, a corresponding directory can be specified here.
            </td>
        </tr>
		<tr>
            <td style="font-family: Courier New;">priorityLog</td>
            <td style="font-family: Courier New;">uint32</td>
            <td>Priority for <a href="threads.html">threads</a> that record data. The default value is 30.</td>
        </tr>
		<tr>
            <td style="font-family: Courier New;">portAppSocket</td>
            <td style="font-family: Courier New;">uint16</td>
            <td>UDP port of the AppSocket.
            The default value is 65535.
            If several generic target applications are to be executed on one target computer, the port for the application socket can be adapted.</td>
        </tr>
		<tr>
            <td style="font-family: Courier New;">upperThreadPriority</td>
            <td style="font-family: Courier New;">int32</td>
            <td>Highest priority value for model threads. The default value is 40.</td>
        </tr>
        <tr>
            <td style="font-family: Courier New;">terminateAtCPUOverload</td>
            <td style="font-family: Courier New;">boolean</td>
            <td>Defines whether the application should be terminated on CPU overload or not.
            If there is a CPU-Overload and this value is set to <code>FALSE</code>, the application is not terminated and a <a href="timingscheduling.html#cpuoverload">lost wakeup</a> occurs. The default value is <code>TRUE</code>.</td>
        </tr>
        <tr>
            <td style="font-family: Courier New;">autosavePeriod</td>
            <td style="font-family: Courier New;">double</td>
            <td>
            Defines the time in seconds after which recorded data should be written to a file.
            All open data log files are closed and then reopened.
            A current index file is also written.
            Basically the time should be as large as possible.
            A negative value (or zero) disables the autosave function.
            The default value is 900.
            </td>
        </tr>
    </table>
