<h1>UDP Object Manager</h1>
    The UDPObjectManager manages all UDP objects.
    A UDP object contains a UDP socket, which is used for communication via UDP.
    Over this socket messages are sent and received.
    A UDP socket has a unique port.
    Internally the UDPObjectManager has a hash table (<code>std::unordered_map</code>).
    In this hash table all UDP objects are stored with their unique port as key value.

    <h3>Initialization</h3>
    During the initialization phase the start callback functions of UDP Send or UDP Receive blocks are called.
    These blocks register a UDP socket at the UDPObjectManager.
    During the registration the following parameters are passed.
    <table>
		<tr><th>Parameter</th><th>Description</th></tr>
		<tr><td>ipInterface</td><td>
            The IP address of the interface to be used.
            If the target computer has several network interfaces, this IP address can be used to select the corresponding network interface.
            If the address <code>0.0.0.0</code> is specified as interface, the default network interface is used.
            </td></tr>
        <tr><td>port</td><td>
            The port to bind for the UDP socket.
            In case of a UDP Send block, messages are sent from this port.
            With a UDP Receive block, messages are received at this port.
            </td></tr>
        <tr><td>rxBufferSize</td><td>
            The size of the data buffer to be used to receive a message.
            UDP Send blocks register at the UDPObjectManager with <code>rxBufferSize = 1</code>.
            </td></tr>
        <tr><td>prioritySocket</td><td>
            This allows you to set the priority of the socket.
            Linux uses this value to sort the network queues: packets with a higher priority can be processed first.
            If the UDPObjectManager has already registered a corresponding UDP socket with the unique port, this parameter is only updated.
            Thereby always the higher priority value is used.
            </td></tr>
        <tr><td>priorityThread</td><td>
            This sets the priority of the receive thread.
            One <a href="threads.html">receive thread</a> is assigned to each UDP socket.
            This thread receives messages and copies them into an internal buffer from where they can be retrieved by a UDP Receive block.
            </td></tr>
        <tr><td>numBuffers</td><td>
            Specifies the number of message buffers (>= 1).
            If several messages were received without picking up any, these messages are buffered.
            This value indicates the size of the buffer, i.e. the maximum number of stored messages.
            </td></tr>
        <tr><td>bufferStrategy</td><td>
            If several messages have been received without being picked up, these messages are buffered.
            With this value you can define how to proceed when the message buffer is full and new messages are received.
            There are two strategies:
            <br><b>DISCARD_OLDEST (0)</b>: The oldest message is deleted from the FIFO buffer and the newly received message is added to the FIFO buffer.
            <br><b>DISCARD_RECEIVED (1)</b>: The received message is discarded. The FIFO buffer remains unchanged.
            </td></tr>
        <tr><td>ipFilter</td><td>
            Array of 4 bytes containing IPv4 address of the sender address that should be allowed. If no filter should be used, all bytes must be zero.
            </td></tr>
        <tr><td>countAsDiscarded</td><td>
            Non-zero value if out-filtered messages should be counted as discarded, zero if not.
            </td></tr>
	</table>

    <h3>Termination</h3>
    During the termination phase all UDP sockets are closed and all receive threads are terminated.
    Subsequently, all UDP objects are removed from the hash table.


<h2>Send and Receive Messages</h2>
    As soon as the UDPObjectManager is created, all registered UDP objects are created with the corresponding parameters.
    Afterwards no further UDP sockets can be registered.
    The actual sending and receiving of messages is done by UDP Send or UDP Receive blocks during the corresponding <code>step()</code> methods of the Simulink model.
    These driver blocks use the UDPObjectManager to send and receive messages.

    <h3>Send</h3>
    The sending is done immediately. When sending, the following parameters are passed to the UDPObjectManager.
    <table>
		<tr><th>Parameter</th><th>Description</th></tr>
		<tr><td>port</td><td>
            The port that was also used during the registration of the socket.
            The UDPObjectManager searches the internal hash table for an entry with the specified port and then sends the message over the corresponding socket.
            </td></tr>
        <tr><td>destination</td><td>
            The destination address specifies to whom the message should be sent.
            The destination address consists of the destination IP address and the destination port.
            </td></tr>
        <tr><td>bytes</td><td>
            An array of bytes containing the message to be sent.
            </td></tr>
        <tr><td>length</td><td>
            The number of bytes to send.
            </td></tr>
    </table>
    The following parameters are returned by the block when selected via the mask dialog.
    <table>
		<tr><th>Parameter</th><th>Description</th></tr>
		<tr><td>result</td><td>
            An integer indicating the number of bytes that have been transmitted or a negative value in case of errors.
            </td></tr>
    </table>

    <h3>Receive</h3>
    Receiving is always done in a parallel executed receive thread.
    Each UDP socket has its own receive thread.
    If IP address filtering is used, then only messages from the specified address are processed and all other messages are discarded.
    The received messages are copied into an internal buffer.
    The buffer can contain several messages.
    If a new message is received, it is added to the buffer.
    If the buffer is full, newly received messages are discarded or added by discarding the oldest message from the buffer.
    With the UDP Receive block the whole message buffer can be fetched.
    The UDPObjectManager is given the port of the UDP socket to be used.
    The remaining parameters are returned by the UDPObjectManager.
    <table>
		<tr><th>Parameter</th><th>Description</th></tr>
		<tr><td>port</td><td>
            The port that was also used during the registration of the socket.
            The UDPObjectManager searches the internal hash table for an entry with the specified port and fetches the whole message buffer of the corresponding socket.
            </td></tr>
        <tr><td>sources</td><td>
            The source addresses indicate the sender of the corresponding message.
            A source address consists of the IP address and the source port.
            There is one source address for each message in the message buffer.
            </td></tr>
        <tr><td>bytes</td><td>
            An array of bytes which contains the entire message buffer.
            In the MATLAB/Simulink block an N-by-M matrix is generated from the array, where N is the buffer size of a message and M is the maximum number of messages in the buffer.
            </td></tr>
        <tr><td>lengths</td><td>
            The number of bytes received (for each message).
            For each message from the message buffer there is a length information.
            If a buffer contains no message, the corresponding value is zero.
            </td></tr>
        <tr><td>timestamps</td><td>
            A timestamp indicates the time at which a message was received.
            This time corresponds to the measured time in seconds since the scheduler was started.
            This time is comparable to the <a href="timingscheduling.html">hardware time</a>, but can also be between two sampling steps.
            There is a time for each message from the message buffer.
            </td></tr>
        <tr><td>numMessagesReceived</td><td>
            The number of messages that have been received/written to the bytes output.
            </td></tr>
        <tr><td>numMessagesDiscarded</td><td>
            The number of messages that have been discarded.
            </td></tr>
    </table>
