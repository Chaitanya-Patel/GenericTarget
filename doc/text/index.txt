    <center><object width="25%" data="../img/gt.svg" type="image/svg+xml"></object></center>
    <br>

<h1>Generic Target</h1>
    The <b>Generic Target Toolbox</b> can be used to run MATLAB/Simulink models on a target computer in realtime.
    The common Simulink realtime libraries can only be used in combination with a specific hardware to realize realtime applications.
    Thus, the implementation of an application is often limited to certain hardware.
    Although the supported hardware often has serial interfaces and/or digital inputs and outputs, AD/DA converters, CAN bus, etc., it may be limited from a computing power point of view.
    Often only network interfaces are used anyway.
    For applications where network interfaces alone are sufficient, the Generic Target Toolbox can be used to realize hardware-independent realtime applications with MATLAB/Simulink.
    In principle, any computer can be used as target computer as long as a Linux operating system is used with the PREEMPT_RT patch.
    Using a Linux operating system also has the advantage that additional software libraries can be easily integrated. The toolbox includes the following modules:
    <br>
    <br>
    <table style="border:none;">
        <tr><td style="border:none;"><img src="../img/MATLABPackage.png"></td><td width="10px" style="border:none;"></td><td valign="top" style="border:none;">
            <h4>MATLAB Package</h4>
            The MATLAB package (<b>GT</b>) includes the <code>GT.GenericTarget</code> class.
            This class can be used to generate source code for the generic target application based on a Simulink model and deploy it to the target.
            In addition, this class can also be used to start and stop the application or download recorded data.
            Furthermore, the (<b>GT</b>) MATLAB package contains functions to decode recorded data.
            </td><tr>
        <tr><td style="border:none;"><img src="../img/SimulinkLibrary.png"></td><td style="border:none;"></td><td valign="top" style="border:none;">
            <h4>Simulink Library</h4>
            The Simulink library contains driver blocks.
            These blocks generally have no effect in a simulation and serve as code placeholders for the target application.
            However, a host implementation can be used during the <a href="installtoolbox.html">toolbox installation</a>.
            This allows many of the blocks to be used in the simulation.
            </td><tr>
        <tr><td style="border:none;"><img src="../img/TemplateModel.png"></td><td style="border:none;"></td><td valign="top" style="border:none;">
            <h4>Template Model</h4>
            The MATLAB package includes a template for a Simulink model.
            Based on this model, the software for the generic target application can be implemented.
            This template is configured with all necessary settings.
            </td><tr>
        <tr><td style="border:none;"><img src="../img/GenericTargetSoftware.png"></td><td style="border:none;"></td><td valign="top" style="border:none;">
            <h4>Generic Target Software</h4>
            The MATLAB package contains the source code for the realtime application running on the target computer.
            The build procedure compiles this source code together with the generated code of the Simulink model on the target computer.
            </td><tr>
    </table>
    <br>

<h2>The Framework - How It Works</h2>
    A MATLAB/Simulink model can be created based on the Simulink model template.
    In principle, all standard blocks from which generic C/C++ code can be generated can be used.
    Special interface blocks such as UDP Receive or Target Scope from the Simulink Realtime Toolbox cannot be used.
    A separate Simulink library with driver blocks comes with the Generic Target Toolbox.
    You can use the MATLAB class <code>GT.GenericTarget</code> to deploy the Simulink model to the target computer.
    Generic C/C++ code is generated from the Simulink model.
    The generated code essentially contains a class with the methods <code>initialize()</code>, <code>step()</code>, and <code>terminate()</code>.
    Besides the generated code, the <code>codeInfo.mat</code> file is generated.
    This file contains additional information like sample rates, thread priorities and function names.
    Based on this information, the source code for a <a href="simulinkinterface.html">Simulink interface class</a> is generated.
    The programming interface from the actual generic target software to this Simulink interface class is always the same.
    The necessary additional information (e.g. thread priorities) from the code generation is also integrated into the Simulink interface class.
    <br>
    <br>
    <center><object data="../img/Overview.svg" type="image/svg+xml"></object></center>
    <br>
    The source code for the generic target software is included in the MATLAB package and is copied once to the target computer.
    In contrast, the source code for the Simulink interface class and the source code for the actual model is generated during each build procedure and copied to the target computer.
    The software is then compiled on the target computer.
    When running the generic target application, the <code>initialize()</code> method is executed once at the beginning.
    Afterwards the <code>step()</code> method is executed with the appropriate sampling rate.
    When the application is terminated, the <code>terminate()</code> method is called.
    If several different sampling rates exist in the model, several <code>step()</code> methods are generated.
    These are called <code>step0()</code>, <code>step1()</code>, <code>step2()</code>, and so on.
    All those <code>step()</code> methods are then executed in parallel in separate threads with corresponding priorities.
    The lower the sample rate, the higher the priority
    <br>
    <br>
    <div class="note-orange">
	<h3 class="note-orange">Note about the Rate-Transition block</h3>
    In principle, multiple threads are created by using rate transition blocks with different samplerates.
    On the target computer the threads are executed in concurrence to each other.
    To ensure data integrity, the option <b>Ensure data integrity during data transfer</b> must be enabled in the rate-transition block.
	</div>
