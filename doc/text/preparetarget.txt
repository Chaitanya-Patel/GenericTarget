<h1>Prepare Target Computer</h1>
    First the target computer must be prepared.
    For this purpose a linux-based operating system must be installed and configured on the target computer.
    Basically, any Linux distribution can be selected.
    Since all Linux distributions differ slightly from each other, no detailed instructions can be given here.
    Some packages may therefore already be installed, others still have to be installed.
    The next step is to generate SSH keys so that a host is able to login to the target without entering a password.
    Then the Generic Target Framework is installed. The following steps must be performed.
    <br>
    <ul>
        <li><a href="#step1">Step 1: Install Linux OS</a></li>
        <li><a href="#step2">Step 2: Configure Linux</a></li>
        <li><a href="#step3">Step 3: Generate SSH Key for Autologin</a></li>
        <li><a href="#step4">Step 4: Setup Generic Target Framework</a></li>
    </ul>

    <a name="step1"></a>
    <h2>Step 1: Install Linux OS</h2>
    Download a linux distribution of your choice and follow the instructions.
    Usually you need to create a bootable USB stick and boot from it.
    If available, the option to only do a minimal installation should be selected - without office applications and games.
    Furthermore, you can enable the SSH server during installation for most linux distributions.

    <a name="step2"></a>
    <h2>Step 2: Configure Linux</h2>
    If your linux distribution does not come with <code>sudo</code>, then you have to install it. <code>sudo</code> is required to run
    application with administrator privileges.
    Connect the target to the internet and update the package database.
    <pre>sudo apt update</pre>
    If there're updates available, run
    <pre>sudo apt upgrade</pre>
    At the beginning you can adjust basic settings.
    The user account should be set so that the user logs in automatically.
    Furthermore, the energy saving setting should be adjusted so that the computer does not automatically switch to standby mode.

        <h3>Configure sudo</h3>
        In order to execute sudo commands via SSH without password request, edit the sudoers file with
        <pre>sudo nano /etc/sudoers</pre>
        The line starting with "%sudo" must look like this
        <pre>%sudo   ALL=(ALL:ALL) NOPASSWD: ALL</pre>
        Save and close the file.

        <h3>Install PREEMPT_RT patch</h3>
        The installation of the realtime kernel patch depends on the linux distribution used.
        Some distributions provide packages like <code>linux-image-realtime</code> or <code>linux-image-rt-amd64</code>.
        On debian for example, the realtime patch is installed by
        <pre>sudo apt install linux-image-rt-amd64</pre>
        To check if the realtime kernel is active, open a terminal and type <code>uname -a</code>.
        You should see something with "SMP PREEMPT RT".

        <h3>Install C++ Compiler + Tools</h3>
        Install the GNU compiler, build tools and C++ libraries with
        <pre>sudo apt install g++ make build-essential</pre>
        <div class="note-orange">
        <h3 class="note-orange">Note</h3>
        C++17 is required. Make sure that the installed g++ compiler supports the C++17 language features.
        </div>

        <h3>Optional</h3>
        Additional software can now be installed, e.g. wireshark.
        It is recommended to install network tools (for ping tests):
        <pre>sudo apt install net-tools</pre>

        <h3>Hardware Tuning</h3>
        Now, some optional settings can be made to the BIOS and operating system to improve the performance and get the lowest possible worst-case latency.
        Here are some pointers to help guide you.
        <ul>
            <li>enable turbo boost if your system supports it</li>
            <li>disable CPU sleep states and CPU frequency scaling</li>
            <li>disable any kind of energy saving options</li>
            <li>disable Hyper-Threading to avoid virtual CPU cores</li>
            <li>disable services you don't need</li>
            <li>if you don't need USB, disable it in the BIOS</li>
        </ul>

    <a name="step3"></a>
    <h2>Step 3: Generate SSH Key for Autologin</h2>
    <div class="note-orange">
    <h3 class="note-orange">Note</h3>
    On Linux this step is optional. However, on Windows this step is <b>required</b> to allow ssh/scp commands to be executed from the
    MATLAB console. The following description applies only to Linux host computers, since some commands are not available on Windows.
    </div>

    While creating, starting and stopping an application on the target computer with the GenericTarget toolbox, commands are executed via SSH.
    The connection from the user PC to the target computer via SSH must be constantly authorized and confirmed with a password.
    Alternatively, keys can be generated and exchanged once.
    Those keys are then used to establish an SSH connection from one computer to another without the need to enter a password.
    SSH keys are stored in the home directory under <code>~/.ssh/</code>.
    This folder can be easily deleted to "forget" all previous SSH connections.
    The following commands are all executed on a user PC, i.e. the client that wants to connect to an SSH server on another computer.

    <div class="note-green">
    <h3 class="note-green">Linux</h3>
        <h3>1. Generate Key</h3>
        With the command
        <pre>ssh-keygen</pre>
        a key is generated. Then you can specify a file name in which the key should be stored.
        With <code>RETURN</code> a default file name is used. Then you can specify a passphrase from which the key will be generated.
        With <code>RETURN</code> an empty passphrase is used. You can use the same key for several target computers.

        <h3>2. Copy Public Key to Target</h3>
        To copy the generated key (public key) to a target computer use the command
        <pre>ssh-copy-id -i ~/.ssh/id_rsa.pub UserName@RemoteServer</pre>
        Here <code>UserName</code> and <code>RemoteServer</code> must be replaced by the user name and IP address of the target computer.

        <h3>3. Add Private Key</h3>
        Now all that remains is to add a private key. To do this, execute the command
        <pre>ssh-add</pre>
        Establishing an SSH connection should now be done without asking for a password.
        For testing, make an SSH connection with the command <code>ssh UserName@RemoteServer</code>.
    </div>

    <div class="note-blue">
    <h3 class="note-blue">Windows</h3>
        <h3>1. Prepare</h3>
        Open PowerShell as an administrator and run
        <pre>Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0</pre>
        to install OpenSSH. Close the PowerShell. The remaining commands can be executed using a normal windows terminal.

        <h3>2. Generate Key</h3>
        With the command
        <pre>ssh-keygen</pre>
        a key is generated. Then you can specify a file name in which the key should be stored.
        With <code>RETURN</code> a default file name is used. Then you can specify a passphrase from which the key will be generated.
        With <code>RETURN</code> an empty passphrase is used. You can use the same key for several target computers.

        <h3>3. Copy Public Key to Target</h3>
        To copy the generated key (public key) to a target computer use the command
        <pre>scp C:\Users\HostName\.ssh\id_rsa.pub UserName@RemoteServer:</pre>
        where <code>HostName</code> is your host username and <code>UserName</code> and <code>RemoteServer</code> must be replaced by
        the user name and IP address of the target computer. Notice the <code>:</code> character at the end of the command.

        <h3>4. Configure Key</h3>
        Login to the target computer via SSH using
        <pre>ssh UserName@RemoteServer</pre>
        The following commands are all executed on the target computer.
        Next, make sure that the <code>.ssh</code> directory exists on the target. If not, you can create the directory with
        <pre>mkdir .ssh</pre>
        Append the uploaded public key to the authorized keys.
        <pre>cat id_rsa.pub >> .ssh/authorized_keys</pre>
        and delete the public key.
        <pre>rm id_rsa.pub</pre>
        The <code>.ssh</code> and <code>authorized_keys</code> directories must have the correct set of permissions.
        Execute the following commands
        <pre>chmod 700 ~/.ssh</pre>
        <pre>chmod 600 ~/.ssh/authorized_keys</pre>
        and run
        <pre>exit</pre>
        to logout. or testing, make an SSH connection from the host PC to the target computer with the command <code>ssh UserName@RemoteServer</code>.
    </div>

    <a name="step4"></a>
    <h2>Step 4: Setup Generic Target Framework</h2>
    Make sure you have <a href="installtoolbox.html">installed the Generic Target MATLAB Toolbox</a>.
    The framework for the generic target is installed using the MATLAB package (<b>GT</b>).
    With the following script the source code for the framework is copied to the target and precompiled.
    Make sure that your Host PC can connect to the target computer.
    SSH and SCP are used to execute commands and copy data, respectively.
<pre>username = 'user';           % Set username of target computer
address  = '192.168.0.100';  % Set address of target computer

gt = GT.GenericTarget(username, address);
gt.Setup();</pre>
    <div class="note-green">
    <h3 class="note-green">Note</h3>
    The default directory on the target computer is <code>~/GenericTarget/</code>, which is created in the home directory.
    If another directory is to be used, it can be passed as a parameter to the <code>Setup()</code> method.
    </div>
    <div class="note-orange">
    <h3 class="note-orange">Note</h3>
    If an updated version of the Generic Target MATLAB Toolbox is to be used, then the new framework should also be copied to the target computer by running the <code>Setup()</code> method again.
    </div>

